export interface IState {
  currentGame: IGame;
  gamesList: { [key: string]: IGame };
  user: IUser;
}

export type ITimeEventType =
  | "start"
  | "pause"
  | "restart"
  | "end"
  | "correction"
  | "missing";

export type IWhichTeam = "none" | "home" | "away";

export type ICardColor = "none" | "red" | "yellow";

export type IMsgCategory =
  | "time"
  | "card"
  | "score"
  | "substitution"
  | "getDetails"
  | "endGame";

export interface IQueueItem {
  gameId: string;
  id: string;
  timestamp: number; // standard ms timestamp
  gameStartTime: number; // standard ms timetamp
  gameTime: number; // ms since game start timestamp
  isLive: boolean; // whether the clock is stopped or running
  category: IMsgCategory;
  type?: ITimeEventType;
  team?: IWhichTeam;
  points?: number;
  playerNumber?: number;
  playerIn?: number;
  playerOut?: number;
  cardColor?: ICardColor;
}

export interface IDisplayQueueItem {
  id: string;
  timestamp: number;
  gameTime: number;
  displayValue: string;
  iconColor: ICardColor | null;
  icon: "credit-card" | "rugby-ball" | "switch";
  displayTime: string;
  team: "home" | "away";
}

export interface IPlayer {
  number: number;
  id: string;
  name: string;
  frontRow: boolean;
  sub: boolean;
}

export interface ITeam {
  name: string;
  shortName: string;
  color: string;
  players: IPlayer[];
}

export interface IGameSettings {
  // gets sent to watch
  totalTime: number; // ms
  timeIntervals: number[]; // halftime
  yellowTime: number; //ms
  colorHome: string;
  colorAway: string;
  homePlayerNumbers: number[];
  awayPlayerNumbers: number[];
  kickOff: number | null; // time of plannedKickoff
  numberOfPlayers: number;
  scoreOnly: boolean;
}

export interface IGame {
  gameId: string;
  sport: {
    name: "rugby";
    format: "15s" | "7s" | "custom";
    variant: "union" | "league" | "touch";
  };
  user: {
    ownerId: string;
    associatedUsers: { id: string; role: string }[];
    gameControler: string;
  };
  queue: IQueueItem[]; // can only be generated by the watch
  displayQueue: IDisplayQueueItem[];
  liveData: {
    homeScore: number;
    awayScore: number;
    intervalIndex: number;
    isLive: boolean;
    time: {
      gameTime: null | number;
      at: null | number;
    };
  };
  scoreOnly: boolean;
  isRunning: boolean;
  gameStartTime: number;
  plannedKickOff: number;
  isSaved: boolean;
  isPublished: boolean;
  isArchived: boolean;
  isFinished: boolean;
  createdAt: number | null;
  lastSync: number | null;
  title: string;
  gameSettings: IGameSettings;
  homeTeam: ITeam;
  awayTeam: ITeam;
  displayScreenId?: string;
  location?: string;
  address?: string;
  referee?: string;
  league?: string;
}

export interface ITimeItem {
  gameId: string;
  id: string;
  timestamp: number;
  gameStartTime: number;
  gameTime: number;
  isLive: boolean;
  type: ITimeEventType;
  category: IMsgCategory;
}

export interface IScoreItem {
  gameId: string;
  id: string;
  timestamp: number;
  gameTime: number;
  isLive: boolean;
  category: IMsgCategory;
  points: number;
  playerNumber: number;
  team: IWhichTeam;
}

export interface ISubItem {
  gameId: string;
  id: string;
  timestamp: number;
  gameTime: number;
  isLive: boolean;
  category: IMsgCategory;
  playerIn: number;
  playerOut: number;
  team: IWhichTeam;
}

export interface ICardItem {
  gameId: string;
  id: string;
  timestamp: number;
  gameTime: number;
  isLive: boolean;
  category: IMsgCategory;
  playerNumber: number;
  cardColor: ICardColor;
  team: IWhichTeam;
}

export interface IWatchMessage {
  id: string;
  timestamp: number;
  gameTime: number;
  isRunning: boolean;
  category: IMsgCategory;
  eventType?: ITimeEventType;
  playerIn?: number;
  playerOut?: number;
  playerNumber?: number;
  points?: number;
  cardColor?: ICardColor;
  team?: IWhichTeam;
}

export interface IUser {
  id: string;
  email: string;
  name: string;
  organisation: string;
  role: string;
  isLoggedIn: boolean;
  gameLocked: boolean;
  userError: string;
  selectedLeague: string;
  selectedOrganisation: string;
}

export interface IGamesList {
  [key: string]: IGame;
}

export type Route = "Games" | "MatchSetup" | "TeamSetup" | "Game";
export interface RouteDef {
  route: Route;
  name: string;
  auth: boolean;
}

interface IShadow {
  shadowColor: string;
  shadowOffset: {
    width: number;
    height: number;
  };
  shadowRadius: number;
  elevation: number;
}

export interface ITheme {
  name: string;
  background: string;
  deepBackground: string;
  color: string;
  elevatedBackground: string;
  borderColor: string;
  bigShadow: IShadow;
  smallShadow: IShadow;
  secondaryBackground: string;
  red: string;
  yellow: string;
  green: string;
  blue: string;
  white: string;
  dark: string;
}

export interface IThemes {
  dark: ITheme;
  light: ITheme;
  blue: ITheme;
}

export interface ILeague {
  id: string;
  name: string;
  startDate: number;
  endDate: number;
  organisation: string;
  administrators: string[];
  games: string[];
}

export interface IOrganisation {
  id: string;
  name: string;
  leagues: string[];
  contact: string;
  tenant: string;
  users: string[];
}

export interface ITenant {
  id?: string;
  name: string;
  organisations: string[];
  description: string;
  deleted: boolean;
}

// Clubee

export interface IClubeeGame {
  invited: boolean;
  id: number;
  start_date: string;
  club: {
    id: number;
  };
  cancelled: boolean;
  game_day: string;
  team1: {
    pic: string;
    pic_s: string;
    pic_b: string;
    season_type_id: number;
    full_name: string;
    id: number;
    name: string;
    sport: {
      name: string;
      season_type_id: number;
      id: number;
    };
    subname: string;
    category: {
      name: string;
      translate: string;
      id: number;
    };
    gender: number;
    country: {
      name: string;
      id: number;
    };
    is_official: boolean;
    ismain: boolean;
  };
  team2: {
    pic: string;
    pic_s: string;
    pic_b: string;
    season_type_id: number;
    full_name: string;
    id: number;
    name: string;
    sport: {
      name: string;
      season_type_id: number;
      id: number;
    };
    subname: string;
    category: {
      name: string;
      translate: string;
      id: number;
    };
    gender: number;
    country: {
      name: string;
      id: number;
    };
    is_official: boolean;
    ismain: boolean;
  };
  score1: number;
  score2: number;
  competition: {
    season_type_id: number;
    id: number;
    sport: {
      name: string;
      season_type_id: number;
      id: number;
    };
    name: string;
    country: {
      name: string;
      id: number;
    };
    category: {
      name: string;
      translate: string;
      id: number;
    };
  };
  phase: {
    id: number;
    name: string;
    type: string;
  };
  duration: number;
  freeze: string;
}

const playerNumberArray = [
  1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
];

export const initialGame = {
  gameId: "",
  sport: {
    name: "rugby" as "rugby",
    format: "15s" as "15s" | "7s" | "custom",
    variant: "union" as "union" | "league" | "touch",
  },
  user: {
    ownerId: "",
    associatedUsers: [],
    gameControler: "",
  },
  queue: [],
  displayQueue: [],
  liveData: {
    homeScore: 0,
    awayScore: 0,
    isLive: false,
    intervalIndex: 0,
    time: {
      gameTime: 0,
      at: Date.now(),
    },
  },
  scoreOnly: false,
  isRunning: false, // the game has started - stays true till end of game
  gameStartTime: 0,
  plannedKickOff: 0,
  isSaved: false,
  isPublished: false,
  isArchived: false,
  isFinished: false,
  createdAt: null,
  lastSync: null,
  title: "",
  location: "",
  address: "",
  referee: "",
  league: "",
  gameSettings: {
    totalTime: 0,
    timeIntervals: [0, 0, 0], // halftime
    yellowTime: 0, // 10 mins bin
    colorHome: "#ffffff",
    colorAway: "#333333",
    homePlayerNumbers: playerNumberArray,
    awayPlayerNumbers: playerNumberArray,
    kickOff: null,
    numberOfPlayers: 15,
    scoreOnly: false,
  },
  homeTeam: {
    name: "",
    shortName: "",
    color: "#fff",
    players: playerNumberArray.map((a) => ({
      number: a,
      name: "",
      id: "",
      sub: false,
      frontRow: false,
    })),
  },
  awayTeam: {
    name: "",
    shortName: "",
    color: "#fff",
    players: playerNumberArray.map((a) => ({
      number: a,
      name: "",
      id: "",
      sub: false,
      frontRow: false,
    })),
  },
};
